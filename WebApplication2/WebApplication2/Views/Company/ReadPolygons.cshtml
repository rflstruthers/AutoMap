@model WebApplication2.Models.ReadPolygonResponse
@{
    ViewBag.Title = "Areas";
    Layout = "~/Views/Shared/_Layout.cshtml";
    TempData["companyId"] = ViewBag.companyId;
}

<title>@ViewBag.Title</title>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>


<body>
    <br />
    <div id="mapView">
        <div id="buttons">
            <div class="card-header">
                <div class="areas-top">
                    <span class="open-nav">&#9776;</span>
                    <span class="title"> Areas</span>
                    <span class="sub-header">Click on area to edit</span>
                    <span id="alerts">
                        @TempData["deleteMessage"]
                        @TempData["createMessage"]
                        @TempData["updateMessage"]
                    </span>
                    <div class="btn-group right" role="group">
                        <button type="button" class="btn lView" title="List View">List</button>
                        <button type="button" class="btn mView" title="Map View">Map</button>
                    </div>
                    <div class="btn-group left" role="group">
                        <button type="button" id="CreateBtn" class="btn" title="Create a New Area">Create Area</button>
                    </div>
                </div>
            </div>
            
        </div>

        <div id="edit" style="display: none;">
            <div class="card-header">
                <div class="areas-top">
                    <span class="open-nav">&#9776;</span>
                    <span class="title"> Areas</span>
                    <span class="sub-header">
                        Editing
                        <span class="glyphicon glyphicon-info-sign" aria-hidden="true"data-toggle="tooltip" 
                                data-placement="right" title="Click on map to add markers. Drag marker to change area.
                                Click on existing marker to delete marker. 3 or 4 markers only."></span>
                        <span id="editingName"></span>
                    </span>

                    <div class="btn-group right" role="group">
                        <button type="button" class="btn lView" title="List View">List</button>
                        <button type="button" class="btn mView" title="Map View">Map</button>
                    </div>
                    <div class="btn-group left" role="group">
                        <button type="button" id="SaveChanges" class="btn save">Save Changes</button>
                        <button type="button" class="btn discard">Discard Changes</button>
                        <button type="button" id="DeleteArea" class="btn delete">Delete Area</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="creating" style="display: none;">
            <div class="card-header">
                <div class="areas-top">
                    <span class="open-nav">&#9776;</span>
                    <span class="title"> Areas</span>
                    <span class="sub-header">
                        Create a New Area
                        <span class="glyphicon glyphicon-info-sign" aria-hidden="true" data-toggle="tooltip"
                              data-placement="right" title="Click on map to add markers.
                            Click on existing marker to delete marker.
                            3 or 4 markers only."></span>
                    </span>
                    <div class="btn-group right" role="group">
                        <button type="button" class="btn lView" title="List View">List</button>
                        <button type="button" class="btn mView" title="Map View">Map</button>
                    </div>
                    <input type="text" id="enterName" class="form-control" placeholder="Area Name">
                    <div class="btn-group left" role="group">
                        <button type="button" id="SaveCreated" class="btn save">Save Area</button>
                        <button type="button" class="btn discard">Discard Area</button>
                    </div>

                </div>
            </div>
        </div>

        <div class="card-body">
            <div id="listView">
                <div class="card-body area-list">
                    <ol id="areaInfo">
                       
                    </ol>
                </div>
            </div>

            <div id="map"></div>
        </div>
    </div>

    

    <script>
        var map;
        var polyPoints = [];
        var marker;
        var markers = [];
        var polygon = [];
        var editPolygon = null;
        var savePolygon = [];
        var bounds;
        var sortedPoints = [];
        var c = document.getElementById("creating");
        var b = document.getElementById("buttons");
        var e = document.getElementById("edit");
        var mapListener;
        var polyListener;

        // toggle between map and list views
        var m = document.getElementById("map");
        var l = document.getElementById("listView");
        var mbtn = document.getElementsByClassName("mView");
        var lbtn = document.getElementsByClassName("lView");
        function showMap() {
            l.style.width = "0";
            m.style.width = "100%";
            for (var i = 0; i < lbtn.length; i++) {
                lbtn[i].style.backgroundColor = "#e3e7ee";
                lbtn[i].style.color = "#111";
            }
            for (var i = 0; i < mbtn.length; i++) {
                mbtn[i].style.backgroundColor = "#111";
                mbtn[i].style.color = "#e3e7ee";
            }
            
        }
        function showList() {
            m.style.width = "50%";
            l.style.width = "50%";
            for (var i = 0; i < mbtn.length; i++) {
                mbtn[i].style.backgroundColor = "#e3e7ee";
                mbtn[i].style.color = "#111";
            }
            for (var i = 0; i < lbtn.length; i++) {
                lbtn[i].style.backgroundColor = "#111";
                lbtn[i].style.color = "#e3e7ee";
            }
        }

        // Make alerts go away after 3 seconds.
        var a = document.getElementById("alerts");
        setTimeout(function () { a.style.display = "none" }, 5000);

        
        // View all button in map.
        function CenterControl(controlDiv, map) {
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginRight = '10px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to view all areas';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = '#111;';
            controlText.style.fontFamily = 'Josefin Sans,sans-serif';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.textContent = 'View All';
            controlUI.appendChild(controlText);

            // Setup the click event listeners.
            controlUI.addEventListener('mouseenter', function () {
                controlUI.style.backgroundColor = '#e3e7ee';
            });
            controlUI.addEventListener('mouseleave', function () {
                controlUI.style.backgroundColor = '#fff';
            });
            controlUI.addEventListener('click', function () {
                zoomOut(map);
            });

        }

        function initMap() {
            var polygons = [];
            // Add all points from all polygons to pointsArray, make pointsArray the map bounds so map
            // can be centered on all polygons.
            var pointsArray = [];
            @foreach (var polygon in Model.Polygons)
            {

                foreach (var d in polygon.Points)
                {

                    @:pointsArray.push({ lat: @d.Latitude, lng: @d.Longitude});
                }
            }
            bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < pointsArray.length; i++) {
                bounds.extend(pointsArray[i]);
            }

            // Initialize map with center being the center of all the points
            map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: bounds.getCenter(),
            mapTypeId: 'satellite',
            disableDefaultUI: true,
                zoomControl: true,
            tilt: 0

            });
            map.fitBounds(bounds);
            // Mapping points from model to js array in a format Google Maps likes
            @foreach (var polygon in Model.Polygons)
            {
                @:var pointsArray = [];
                foreach (var d in polygon.Points)
                {

                    @:pointsArray.push({ lat: @d.Latitude, lng: @d.Longitude});
                }
                <text>
                    polygon = new google.maps.Polygon({
                        paths: pointsArray,
                        strokeColor: 'black',
                        strokeWeight: 2,
                        fillColor: 'black',
                        name: '@polygon.PolygonName',
                        id: @polygon.PolygonID,
                        fillOpacity: 0.2
                    });

                    // Add polygons to array
                    polygons.push(polygon);

                    // Add listener to see if polygon is clicked.
                    polyListener = google.maps.event.addListener(polygon, 'click', function (event) {
                        polygonClicked(this);
                    });

                    polygon.setMap(map);
                </text>
             }

            // Populate list view with polygon info.
            // When list item is clicked, jump to edit view for that polygon.
            for (let i = 0; i < polygons.length; i++) {
                var aInfo = document.getElementById("areaInfo");
                var newLink = document.createElement("a");
                newLink.className = "list-group-item areas";
                newLink.appendChild(document.createTextNode(polygons[i].name));
                newLink.addEventListener('click', function () {
                    polygonClicked(polygons[i]);
                });
                aInfo.appendChild(newLink);
            }

            // Create the DIV to hold the control and call the CenterControl()
            // constructor passing in this DIV.
            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);

            centerControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(centerControlDiv);
        }

        // Add editable markers and new polygon over clicked on polygon.
        function polygonClicked(event) {
            // remove any existing markers
            removeMapOnAll();
            // Show edit buttons/hide create button.
            e.style.display = "block"
            b.style.display = "none"
            document.getElementById("editingName").innerHTML = event.name;
            // Add listener to map so a marker is added if the map is clicked.
            mapListener = map.addListener('click', function (location) {
                addMarker(location.latLng);
            });
            // Draw markers and polygon.
            var polygonBounds = event.getPath();
            var newBounds = new google.maps.LatLngBounds();
            for (var i = 0; i < polygonBounds.length; i++) {
                var point = {
                    lat: polygonBounds.getAt(i).lat(),
                    lng: polygonBounds.getAt(i).lng()
                };
                addMarker(point);
                newBounds.extend(point);
            }
            // Set the selected polygon to savePolygon.
            savePolygon = event;
            // Zoom in on selected polygon and center the map on it.
            //map.setZoom(12);
           //map.fitBounds(newBounds);
            map.setCenter(newBounds.getCenter());
        }

        // Remove any markers, display create polygon controlls, add listener to add markers when the map is clicked.
        function createPolygon() {
            removeMarkers();
            if (c.style.display === "none") {
                b.style.display = "none";
                e.style.display = "none";
                c.style.display = "block";
                mapListener = map.addListener('click', function (location) {
                    addMarker(location.latLng);
                });
            }
        }

        // Add markers to clicked polygon
        function addMarker(point) {
            if (markers.length < 4) {
                marker = new google.maps.Marker({
                    position: point,
                    draggable: true,
                    map: map,
                    icon: {
                        url: "https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle.png",
                        size: new google.maps.Size(7, 7),
                        anchor: new google.maps.Point(3.5, 3.5)
                    },
                });
                markers.push(marker);
                drawPolyline();
            }

            // event listener for deleting marker, must have at least 3 markers
            marker.addListener('click', function (event) {
                if (markers.length > 3) {
                    for (var i = 0; i < markers.length; i++) {
                        if (markers[i] === this) {
                            this.setMap(null);
                            markers.splice(i, 1);
                            drawPolyline();
                        }
                    }
                }
            });

            // add listener to redraw the polyline when markers position change
            marker.addListener('position_changed', function () {
                drawPolyline();
            });
        }

        // function to draw polygon around markers. Makes sure vertex don't intersect.
        function drawPolyline() {
            var markersPositionArray = [];
            var pointsArray = [];
            var sortedPoints = [];
            var center;
            var heading;

            // obtain latlng of all markers on map
            markers.forEach(function (e) { markersPositionArray.push(e.getPosition()); });

            // get the center of existing polygon
            var centerBounds = new google.maps.LatLngBounds();
            for (var i = 0; i < markersPositionArray.length; i++) {
                centerBounds.extend(markersPositionArray[i]);
            }
            center = centerBounds.getCenter();

            // get the heading of each marker compared to the center point, add heading and position of each marker to pointsArray
            markersPositionArray.forEach(function (e) {
                heading = google.maps.geometry.spherical.computeHeading(center, e);
                pointsArray.push({ "position": e, "heading": heading });
            });

            // sort pointsArray based on heading and add position of each sorted marker to sortedArray
            pointsArray.sort(function (a, b) {
                if (a.heading > b.heading) return 1;
                else if (a.heading < b.heading) return -1;
                return 0;
            });
            pointsArray.forEach(function (e) {
                sortedPoints.push(e.position);
            });

            // set save polygon paths as sorted points so polygon paths are saved correctly.
            savePolygon.paths = sortedPoints;

            // check if there is already polygon drawn on map
            // remove the polygon from map before we draw new one
            if (editPolygon !== null) {
                editPolygon.setMap(null);
            }

            // Construct the polygon with sortedArray as the paths.
            editPolygon = new google.maps.Polygon({
                map: map,
                paths: sortedPoints,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes markers and drawn polygons from map.
        function removeMarkers(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            if (editPolygon !== null) {
                editPolygon.setMap(null);
            }
            markers = [];
            savePolygon = [];
            google.maps.event.removeListener(mapListener);
        }

        // Calls on removeMarkers() and removes create polygon display.
        function removeMapOnAll(map) {
            removeMarkers();
            $(document).ready(function () {
                $("#enterName").val("");
            });
            // Hide edit buttons
            c.style.display = "none";
            e.style.display = "none";
            b.style.display = "block"

        }

        function zoomOut(map) {
            map.fitBounds(bounds);
            map.setCenter(bounds.getCenter());
        }

        // post new polygon data to UpdatePolygon method
        // save changes to polygon
        $(document).ready(function(){
            $('#SaveChanges').click(function (e) {
                var url = "@Url.Action("UpdatePolygon","Company")";
                var model = { polyPoints: JSON.stringify(savePolygon.paths), polyId: savePolygon.id, polyName: savePolygon.name };
                $.ajax({
                    type: 'POST',
                    data: model,
                    url: url,
                    success: function (data) {
                        window.location.href = data;
                    }
                });
            });

            // Delete selected area
            $('#DeleteArea').click(function (e) {
                var url = "@Url.Action("DeletePolygon","Company")";
                var model = { polyId: savePolygon.id };
                $.ajax({
                    type: 'POST',
                    data: model,
                    url: url,
                    success: function (data) {
                        window.location.href = data;
                    }
                });
            });

            // post new polygon data to SaveCreatedPolygon method
            // save new polygon
            $('#SaveCreated').click(function (e) {
                var url = "@Url.Action("SaveCreatedPolygon","Company")";
                var model = { polyPoints: JSON.stringify(savePolygon.paths), polyName: $("#enterName").val(), companyId: @ViewBag.companyId };

                $.ajax({
                    type: 'POST',
                    data: model,
                    url: url,
                    success: function (data) {
                        window.location.href = data;
                    }
                });
            });

            $('.btn.discard').click(function (e) {
                removeMapOnAll();
                zoomOut(map);
            });
            
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            });

            $('.btn.lView').click(function (e) {
                showList();
            });

            $('.btn.mView').click(function (e) {
                showMap();
            });

            $('.btn.all').click(function (e) {
                zoomOut(map);
            });

            $('#CreateBtn').click(function (e) {
                createPolygon();
            });

            $('.open-nav').click(function (e) {
                openNav();
            });
        });





    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.apiKey&libraries=geometry&callback=initMap"></script>

</body>
