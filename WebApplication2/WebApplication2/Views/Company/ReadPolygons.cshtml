@model WebApplication2.Models.ReadPolygonResponse
@{
    ViewBag.Title = "Areas";
    Layout = "~/Views/Shared/_Layout.cshtml";
    TempData["companyId"] = ViewBag.companyId;
}

<title>@ViewBag.Title</title>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>


<body>
    <h2>Areas: </h2>
    <h4 style="background-color: yellow;">@TempData["deleteMessage"]</h4>
    <h4 style="background-color: yellow;">@TempData["createMessage"]</h4>
    <h4 style="background-color: yellow;">@TempData["updateMessage"]</h4>
    @{
        <table class="table">
            <tr>
                <th></th>
                <th></th>
                <th>
                    Area ID
                </th>
                <th>
                    Area Name
                </th>
            </tr>



            @foreach (var polygon in Model.Polygons)
            {
                <tr>
                    <td>
                        <a href="@Url.Action("ViewPolygon", "Company", new {
                                companyId = ViewBag.companyId, polyId = polygon.PolygonID, polyName = polygon.PolygonName, polyPoints = Json.Encode(polygon.Points)
                            }, null)" title="View Area">
                            <input type="button" value="View / Update Area" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action("DeletePolygon", "Company", new { polyId = polygon.PolygonID }, null)" title="Delete Area">
                            <input type="button" value="Delete Area" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
                        </a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => polygon.PolygonID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => polygon.PolygonName)
                    </td>
                </tr>


            }
        <tr>
            <td>
                <a href="@Url.Action("CreatePolygon", "Company", new { companyId = ViewBag.companyId }, null)" title="Create New Area">
                    <input type="button" value="Create New Area" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
                </a>
            </td>
            <td>
                <input type="button" value="Save Changes" id="SaveChanges" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
            </td>
            <td>
                <a href="@Url.Action("ReadPolygons", "Company", new { id = ViewBag.companyId }, null)" title="Discard Changes">
                    <input type="button" value="Discard Changes" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
                </a>
            </td>
        </tr>
            
        </table>
    }

    <h4>
        Drag markers to change area. Click on map to add new marker. Click on existing marker to delete marker. 3 or 4 markers only.<br />
    </h4>

    <div id="map" style="height:400px;width:100%;"></div>

    <script>

        var map;

        var areas = [];
        var area = {};
        var polyPoints = [];
        var marker;
        var markers = [];
        var counter = 0;
        var polygon;
        var editPolygon = null;
        var savePolygon = [];
        var bounds;
        var sortedPoints = [];

        function initMap() {
            // Initialize map with center being the center of the polygon
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 11,
                //center: bounds.getCenter(),
                center: { lat: 45.479750227876, lng: -122.674423063477 },
                mapTypeId: 'satellite'
            });

            // Mapping points from model to js array in a format Google Maps likes
            @foreach (var polygon in Model.Polygons)
            {
                @:var pointsArray = [];
                foreach (var d in polygon.Points)
                {

                    @:pointsArray.push({ lat: @d.Latitude, lng: @d.Longitude});
                }
                <text>

                    var polygon = new google.maps.Polygon({
                        paths: pointsArray,
                        strokeColor: 'black',
                        strokeWeight: 2,
                        fillColor: 'black',
                        name: '@polygon.PolygonName',
                        id: @polygon.PolygonID,
                        fillOpacity: 0.2
                    });

                    // Add listener to see if polygon is clicked. Add editable markers and new polygon over clicked on polygon.
                    google.maps.event.addListener(polygon, 'click', function (event) {

                        // remove any existing markers
                        for (var i = 0; i < markers.length; i++) {
                            markers[i].setMap(null);
                        }
                        markers = [];
                        var polygonBounds = this.getPath();
                        
                        for (var i = 0; i < polygonBounds.length; i++) {
                            var point = {
                                lat: polygonBounds.getAt(i).lat(),
                                lng: polygonBounds.getAt(i).lng()
                            };
                            addMarker(point);
                        }
                        savePolygon = this;
                    });
                    polygon.setMap(map);
                </text>
             }

                //// Get the center of existing polygon
                //bounds = new google.maps.LatLngBounds();
                //for (var i = 0; i < pointsArray.length; i++) {
                //  bounds.extend(pointsArray[i]);
                //}

                //// This event listener will call addMarker() when the map is clicked.
                //map.addListener('click', function (location) {
                //    addMarker(location.latLng);
                //});
        }

        // Add markers to clicked polygon
        function addMarker(point) {
            if (markers.length < 4) {
                marker = new google.maps.Marker({
                    position: point,
                    draggable: true,
                    id: counter,
                    map: map,
                    icon: {
                        url: "https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle.png",
                        size: new google.maps.Size(7, 7),
                        anchor: new google.maps.Point(3.5, 3.5)
                    },
                });
                markers.push(marker);
                counter++;
                drawPolyline();
            }

            // event listener for deleting marker, must have at least 3 markers
            marker.addListener('click', function (event) {
                if (markers.length > 3) {
                    for (var i = 0; i < markers.length; i++) {
                        if (markers[i] === this) {
                            this.setMap(null);
                            markers.splice(i, 1);
                            drawPolyline();
                        }
                    }
                }
            });

            // add listener to redraw the polyline when markers position change
            marker.addListener('position_changed', function () {
                drawPolyline();
            });
        }

            // function to dray polygon around markers
        function drawPolyline() {
            var markersPositionArray = [];
            var pointsArray = [];
            var sortedPoints = [];
            var center;
            var heading;

            // obtain latlng of all markers on map
            markers.forEach(function (e) { markersPositionArray.push(e.getPosition()); });

            // get the center of existing polygon
            bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < markersPositionArray.length; i++) {
                bounds.extend(markersPositionArray[i]);
            }
            center = bounds.getCenter();

            // get the heading of each marker compared to the center point, add heading and position of each marker to pointsArray
            markersPositionArray.forEach(function (e) {
                heading = google.maps.geometry.spherical.computeHeading(center, e);
                pointsArray.push({ "position": e, "heading": heading });
            });

            // sort pointsArray based on heading and add position of each sorted marker to sortedArray
            pointsArray.sort(function (a, b) {
                if (a.heading > b.heading) return 1;
                else if (a.heading < b.heading) return -1;
                return 0;
            });
            pointsArray.forEach(function (e) {
                sortedPoints.push(e.position);
            });

            // check if there is already polygon drawn on map
            // remove the polygon from map before we draw new one
            if (editPolygon !== null) {
                editPolygon.setMap(null);
            }

            // Construct the polygon with sortedArray as the paths.
            editPolygon = new google.maps.Polygon({
                map: map,
                paths: sortedPoints,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // post new polygon data to UpdatePolygon method
        $(document).ready(function(){
            $('#SaveChanges').click(function (e) {
                var url = "@Url.Action("UpdatePolygon","Company")";

                for (var i = 0; i < markers.length; i++) {
                    polyPoints.push(markers[i].position);
                }
                var model = { polyPoints: JSON.stringify(polyPoints), polyId: savePolygon.id, polyName: savePolygon.name };

                $.ajax({
                    type: 'POST',
                    data: model,
                    url: url,
                    success: function (data) {
                        window.location.href = data;
                    }
                });
            });
        });

    </script>
    @*Enter Your Google Api Key*@
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.apiKey&libraries=geometry&callback=initMap"></script>

</body>
