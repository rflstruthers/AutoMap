@model WebApplication2.Models.Polygon
@{
    ViewBag.Title = "Area";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<title>@ViewBag.Title</title>

<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    
    <style>
    </style>

    
</head>

<body>

    <h2>Areas: </h2>
    @{
        <table class="table">
            <tr>
                <th>
                    Area ID
                </th>
                <th>
                    Area Name
                </th>
                <th></th>
            </tr>

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => Model.PolygonID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.PolygonName)
                </td>
            </tr>
            <td>
                <input type="button" value="Save Changes" id="SaveChanges" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
            </td>
            <td>
                <a href="@Url.Action("ReadPolygons", "Company", new { id = ViewBag.companyId }, null)" title="Discard Changes">
                    <input type="button" value="Discard Changes" class="btn btn-primary" style="height:29px; line-height:75%; border-radius:0;" />
                </a>
            </td>
        </table>
    }

    <h4>
        Drag markers to change area. Click on map to add new marker. Click on existing marker to delete marker. 3 or 4 markers only.<br />
    </h4>

    <div id="map" style="height:400px;width:100%;"></div>

    <script>
        var markers = [];
        var map;
        var pointsArray = [];
        var polyPoints = [];
        var marker;
        var counter = 0;
        var polygon = null;
        var bounds;

        @foreach(var d in Model.Points)
           {
            @:pointsArray.push({lat: @d.Latitude, lng: @d.Longitude});
           }

        function initMap() {

            //get the center of existing polygon
            bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < pointsArray.length; i++) {
              bounds.extend(pointsArray[i]);
            }

            //initialize map with center being the center of the polygon
            map = new google.maps.Map(document.getElementById('map'), {
              zoom: 11,
              center: bounds.getCenter(),
              mapTypeId: 'satellite'
            });

            // Add existing markers to the map.
            for (var i = 0; i < pointsArray.length; i++) {
                addMarker(pointsArray[i]);
            }

            // This event listener will call addMarker() when the map is clicked.
            map.addListener('click', function (location) {
                addMarker(location.latLng);
            });
        }

        // Adds a marker to the map and push to the array.
        function addMarker(location) {
            if (markers.length < 4) {
                marker = new google.maps.Marker({
                    position: location,
                    draggable: true,
                    id: counter,
                    map: map
                });
                markers.push(marker);
                counter++;
                drawPolyline();
            }

            // event listener for deleting marker, must have at least 3 markers
            marker.addListener('click', function (event) {
                if (markers.length > 3) {
                    for (var i = 0; i < markers.length; i++) {
                        if (markers[i] === this) {
                            this.setMap(null);
                            markers.splice(i, 1);
                            drawPolyline();
                        }
                    }
                }
            });

            // add listener to redraw the polyline when markers position change
            marker.addListener('position_changed', function() {
                drawPolyline();
            });
        }

        // function to dray polygon around markers
        function drawPolyline() {
            var markersPositionArray = [];
            var pointsArray = [];
            var sortedPoints = [];
            var center;
            var heading;

            // obtain latlng of all markers on map
            markers.forEach(function (e) {markersPositionArray.push(e.getPosition());});

            // get the center of existing polygon
            bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < markersPositionArray.length; i++) {
              bounds.extend(markersPositionArray[i]);
            }
            center = bounds.getCenter();

            // get the heading of each marker compared to the center point, add heading and position of each marker to pointsArray
            markersPositionArray.forEach(function (e) {
                heading = google.maps.geometry.spherical.computeHeading(center, e);
                pointsArray.push({ "position": e, "heading": heading });
            });

            // sort pointsArray based on heading and add position of each sorted marker to sortedArray
            pointsArray.sort(function(a, b) {
              if (a.heading > b.heading) return 1;
              else if (a.heading < b.heading) return -1;
              return 0;
            });
            pointsArray.forEach(function (e) {
                sortedPoints.push(e.position);
            });

            // check if there is already polygon drawn on map
            // remove the polygon from map before we draw new one
            if (polygon !== null) {
                polygon.setMap(null);
            }

            // Construct the polygon with sortedArray as the paths.
            polygon = new google.maps.Polygon({
                map: map,
                paths: sortedPoints,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
              });
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // post new polygon data to UpdatePolygon method
        $(document).ready(function(){
            $('#SaveChanges').click(function (e) {
                var url = "@Url.Action("UpdatePolygon","Company")";
                for (var i = 0; i < markers.length; i++) {
                    polyPoints.push(markers[i].position);
                }
                var model = { polyPoints: JSON.stringify(polyPoints), polyId: @Model.PolygonID, polyName: '@Model.PolygonName' };

                $.ajax({
                    type: 'POST',
                    data: model,
                    url: url,
                    success: function (data) {
                        window.location.href = data;
                    }
                });
            });
        });

    </script>
    @*Enter Your Google Api Key*@
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAlNR7AYiRN1PF6p3tf9q7B28fk5d8Dx6o&libraries=geometry&callback=initMap"></script>

</body>
